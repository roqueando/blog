# Introdu√ß√£o
Nesse artigo vou mostrar o b√°sico de como eu venho estruturando meus projetos C++ com o CMake, e tamb√©m algumas dicas.

## CMakeLists.txt - o "requirements.txt" do C++
Todo projeto CMake ele precisa conter esse arquivo `CMakeLists.txt` exatamente como est√° escrito, ele √© o arquivo de instru√ß√µes sobre: o que √© o projeto, descri√ß√£o, versionamento, como vai especificar os links e entre outras features que o CMake proporciona.

Caso queira saber mais, d√° uma olhada nessa [documenta√ß√£o da ferramenta](https://cmake.org/cmake/help/latest/).

## Estrutura√ß√£o do arquivo ra√≠z
Pra come√ßar uma estrutura b√°sica n√≥s podemos escrever sobre o que √© o projeto em si.
```cmake
cmake_minimum_required(VERSION 3.14)

set(YOUR_PROJECT_NAME your_project)
set(YOUR_SOURCE_DIR src)
set(YOUR_SOURCE ${YOUR_SOURCE_DIR}/main.cpp)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(YOUR_PROJECT_VERSION 0.1)
set(YOUR_LIBRARY_NAME your_project)
set(YOUR_BINARY_NAME your_project-bin)

project(
  ${YOUR_PROJECT_NAME}
  VERSION ${YOUR_PROJECT_VERSION}
  DESCRIPTION "Your project description"
  LANGUAGES CXX)
```

- Primeiro definimos a vers√£o m√≠nima para rodar o cmake.

- Essa se√ß√£o de `set` √© um pouco opcional mas eu vejo como uma boa pr√°tica pois evita de ficar reescrevendo valores em outros arquivos como este, e vamos ter mais de um arquivo `CMakeLists.txt`. 
    - Al√©m dessas v√°riaveis como nome do projeto ou diret√≥rio do c√≥digo-fonte, existem alguns que s√£o palavras-chave do CMake, como: `CMAKE_CXX_STANDARD` que diz qu√£o ISO ele vai usar para compilar o projeto, e o `CMAKE_CXX_STANDARD_REQUIRED` que vai se auto explica.

- Essa fun√ß√£o project monta os dados base do seu projeto, utilizando os `set` anteriores para construir v√°riaveis importantes no CMake como `PROJECT_NAME`.

## Criando execut√°veis
Em projetos C++ √© muito comum termos execut√°veis e com isso podemos dizer para o CMake como queremos que ele seja montado e com quais bibliotecas queremos que ele seja feito o link.

```cmake
add_executable(${YOUR_BINARY_NAME} src/main.cpp)

target_link_libraries(${YOUR_BINARY_NAME} PUBLIC ${YOUR_LIBRARY_NAME})

add_directory(src)
```

- Essa fun√ß√£o `add_executable` √© bem simples de entender, ela recebe o nome do execut√°vel e qual √© o arquivo respons√°vel.
    -  Caso queira mais de um execut√°veis, apenas chame essa fun√ß√£o com o nome de outro execut√°vel e seu respectivo arquivo `.cpp`

- A fun√ß√£o `target_link_libraries` linka seu execut√°vel com a sua biblioteca.
    - No meu caso eu mantenho como padr√£o ter uma biblioteca _core_ na qual ela ter√° as dependencias corretas.

- A fun√ß√£o `add_directory` adiciona o diret√≥rio `src` para a instru√ß√£o de compila√ß√£o dizendo que queremos ler o arquivo `CMakeLists.txt` dessa pasta.

## Biblioteca

Como disse um pouco acima, normalmente eu crio uma biblioteca _core_ para que ela seja a respons√°vel de organizar meu c√≥digo enquanto o `main.cpp` √© respons√°vel por usar esse c√≥digo.Com isso temos agora duas pastas, uma pasta `src` que vai ter a implementa√ß√£o do seu projeto, e uma pasta `include` onde vai ter seus arquivos _header_:
```txt
~/your_project

‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ include/
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ your_library/
‚îú‚îÄ‚îÄ src/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CMakeLists.txt
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ your_library_impl/
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.cpp
```

Na pasta `src` vai conter o arquivo de instru√ß√µes com esse modelo:

```cmake
file(GLOB HEADER_LIST
  CONFIGURE_DEPENDS "${PROJECT_SOURCE_DIR}/include/**/*.hpp")
file(GLOB SOURCE_LIST "${PROJECT_SOURCE_DIR}/src/**/*.cpp")

add_library(${YOUR_LIBRARY_NAME} ${SOURCE_LIST} ${HEADER_LIST})
target_include_directories(${YOUR_LIBRARY_NAME} PUBLIC ../include)
```

Na primeira parte onde √© chamado as fun√ß√µes `file`, √© gerado uma lista de arquivos e armazenado nas respectivas vari√°veis `HEADER_LIST` e `SOURCE_LIST`. 

A fun√ß√£o `add_library` pega essas listas e linka com a sua biblioteca. Em seguida as fun√ß√µes de target vai incluir o diret√≥rio `include` (que s√£o seus headers).

### FetchContent e seu milagroso gerenciador de depend√™ncias

Uma das maiores d√∫vidas em projetos C++ modernos √© que ele n√£o vem com gerenciadores de pacotes/depend√™ncias como `cargo` para Rust, `pip` para Python ou poder instalar posteriormente como o `composer` para PHP.

Com isso a comunidade do C++ tem uma forma m√°is f√°cil de organizar isso: "Apenas baixe a biblioteca e aponte no seu c√≥digo", por√©m isso fica um pouco invi√°vel se a base de c√≥digo tem muitas depend√™ncias. Ent√£o o CMake tem uma fun√ß√£o perfeita pra isso chamada [FetchContent](https://cmake.org/cmake/help/latest/module/FetchContent.html) na qual voc√™ s√≥ precisa adicionar o nome da biblioteca, o reposit√≥rio dela e a tag.

Um exemplo com a lib argparse:
```cmake
FetchContent_Declare(
  argparse
  GIT_REPOSITORY https://github.com/p-ranav/argparse.git
  GIT_TAG v3.0
)

FetchContent_MakeAvailable(argparse)
```

Em seguida voc√™ s√≥ precisa linkar o target da sua biblioteca com a depend√™ncia instalada:

```cmake
target_link_libraries(${YOUR_LIBRARY_NAME} argparse::argparse)
```

### Testes
Obviamente CMake suporta testes com o comando `ctest` e a forma de configurar os testes segue o mesmo padr√£o. Uma pasta de testes e um `CMakeLists.txt` para as instru√ß√µes de como compilar seus testes.

```cmake
file(GLOB TEST_LIST "${CMAKE_CURRENT_SOURCE_DIR}/*.cpp")

FetchContent_Declare(
  googletest
  GIT_REPOSITORY https://github.com/google/googletest.git
  GIT_TAG v1.14.0
)

FetchContent_MakeAvailable(googletest)
```

Da mesma forma que os arquivos header foram colocados numa lista, os arquivos de testes s√£o uma lista de arquivos `.cpp` dentro da pasta de testes.

Aqui eu optei pelo googletest, que √© um framework de testes unit√°rios. √â bem simples de usar e voc√™ pode encontrar mais detalhes na [documenta√ß√£o](https://google.github.io/googletest/) do framework.

Depois de usar o `FetchContent` para disponibilizar o framework de testes, √© necess√°rio linkar com os testes que ir√£o ser executados. Para isso seguimos com a mesma instru√ß√£o por√©m adicionando um execut√°vel `tests`.

```cmake
add_executable(tests ${TEST_LIST})
target_link_libraries(tests PRIVATE ${YOUR_LIBRARY_NAME} GTest::gtest_main)
add_test(NAME tests COMMAND tests WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})

include(GoogleTest)
```

Note que foi adicionado uma fun√ß√£o `add_test` direcionando qual o comando/executavel precisa ser executado e qual o diret√≥rio de trabalho atual (para os casos que o projeto possua fixtures ou arquivos de testes). A fun√ß√£o de `include` carrega os arquivos CMake internos do framework googletest.

### Dicas
Uma dica muito interessante √© adicionar um POST BUILD para seu projeto, na qual ele vai certificar que tudo que todo seu c√≥digo est√° em funcionamento. A comunidade C++ trata os testes como uma parte do projeto, pra term a m√°xima confian√ßa que suas funcionalidades est√£o corretas e funcionais. Pra isso voc√™ precisa adicionar uma fun√ß√£o `add_custom_command` do tipo `POST_BUILD`.

```cmake
add_custom_command(
    TARGET tests
    POST_BUILD
    COMMAND ${CMAKE_CTEST_COMMAND} --output-on-failure
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    COMMENT "Running tests..."
)
```
Isso far√° com que toda vez que voc√™ fazer o build do seu projeto ela vai rodar os testes em seguida, assim seus testes s√≥ ir√£o rodar se seu build passar, e como √© um POST_BUILD, os seus testes fazem parte do build, logo caso falhem, seu build √© falho tamb√©m.

## Makefile, automatizando tudo
Para finalizar uma boa pr√°tica √© usar o Makefile para n√£o ter que ficar rodando o CMake toda vez, pra isso crie um arquivo `Makefile`, e seu projeto deve estar com essa apar√™ncia:

```txt
~/your_project
‚îú‚îÄ‚îÄ CMakeLists.txt
‚îú‚îÄ‚îÄ Makefile
‚îú‚îÄ‚îÄ include/
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ your_library/
‚îú‚îÄ‚îÄ src/
‚îÇ¬†¬† ‚îú‚îÄ‚îÄ CMakeLists.txt
‚îÇ¬†¬† ‚îî‚îÄ‚îÄ main.cpp
‚îî‚îÄ‚îÄ tests
    ‚îú‚îÄ‚îÄ CMakeLists.txt
    ‚îî‚îÄ‚îÄ your_test.cpp
```

Se voc√™ n√£o sabe como funciona um Makefile, √© bem simples, voc√™ precisa de uma "a√ß√£o" e definir qual os comandos que ela precisa executar. Pra saber mais s√≥ dar uma olhada nesse [tutorial](https://makefiletutorial.com), √© bem explicativo.

Um exemplo de como esse projeto usaria um Makefile:
```Makefile
TARGET = your_project
BUILDDIR = build

run: $(BUILDDIR)/Makefile
	@cd $(BUILDDIR) && ./$(TARGET)

test: $(BUILDDIR)/Makefile
	@cd $(BUILDDIR) && ctest --output-on-failure --gtest_catch_exceptions=0

build: $(BUILDDIR)/Makefile
	@$(MAKE) -C $(BUILDDIR)

$(BUILDDIR)/Makefile:
	@mkdir -p $(BUILDDIR)
	@cd $(BUILDDIR) && cmake ..

clean:
	@$(MAKE) -C $(BUILDDIR) clean
	@rm -rf $(BUILDDIR)
```

Depois de declarar algumas v√°riaveis que ser√£o utilizadas, temos alguns comandos como run, test e build. Sabendo disso alguns desses comandos dependem do `build`, pois sem ele nada seria compilado e poder√≠amos testar ou rodar nosso bin√°rio.

Nota-se que o `$(BUILDDIR)/Makefile` √© um comando tamb√©m, que gera a pasta build e roda o CMake para gerar o esqueleto do diret√≥rio de build, e criar o Makefile pad√£o do CMake, que √© o arquivo gerado automaticamente pela ferramenta baseada nas instru√ß√µes do `CMakeLists.txt`. Com isso √© poss√≠vel usar esse comando como pr√©-requisito para os outros, dando assim uma autonomia para o comando `run` por exemplo, rodar antes de tudo um build.

Esses pr√©-requesitos tamb√©m faz com que s√≥ permita executar o comando desejado caso tiver alguma altera√ß√£o no Makefile gerado pelo CMake.

## Conclus√£o
Com tudo montado voc√™ ter√° um projeto base com um dos build system mais usado no mercado, com direito a build baseado em testes unit√°rios. Essa base √© usada pelo projeto de [banco de dados para logs](/articles/armazen-part-1) que estou criando. 

At√© a pr√≥xima! O ·π£eun üëã
